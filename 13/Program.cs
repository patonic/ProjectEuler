using System;
using System.Diagnostics;
using System.Numerics;
using System.Threading.Tasks;

namespace _13
{
    class Program
    {
        static int maxNum = 10;
        //Числа разделяются 'N'
        static string numberString
        static int numTry = 5;

        static void Main(string[] args)
        {
            for (int i = 0; i < numTry; i++)
                calculating();
            Console.ReadKey();
        }

        static void calculating()
        {
            Stopwatch sw = Stopwatch.StartNew();

            BigInteger sum = 0;
            BigInteger[] numbers = Array.ConvertAll(numberString.Split('N'), delegate (string num) { return BigInteger.Parse(num); });

            Parallel.ForEach(numbers, (BigInteger item) =>
            {
                sum += item;
            });

            Console.WriteLine(sum.ToString().Substring(0, maxNum) + " (" + sw.ElapsedMilliseconds + "ms)");
            sw.Stop();
        }
    }
}
